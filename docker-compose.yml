networks:
  laravel:
    driver: bridge

services:
  proxy:
    build:
      context: .
      dockerfile: .docker/Dockerfile-proxy
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./deployment/config/proxy.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - nginx
    networks:
      - laravel
    tty: true

  frontend:
    build:
      context: .
      dockerfile: .docker/Dockerfile-frontend
      target: dev
    container_name: ${DOCKER_PREFIX}_frontend
    restart: unless-stopped
    command: npm run dev
    volumes:
      - ./frontend:/usr/src
      - /usr/src/node_modules
    depends_on:
      - api
    networks:
      - laravel
    environment:
      NODE_ENV: development
    tty: true

  api:
    build:
      context: .
      dockerfile: .docker/Dockerfile-api
      target: api
    container_name: ${DOCKER_PREFIX}_api
    restart: unless-stopped
    command: sh -c "chmod +x /usr/src/octane.sh && /usr/src/octane.sh"
    volumes:
      - ./api:/usr/src
      - /usr/src/vendor
      - /usr/src/node_modules
      - ./deployment/config/php-fpm/php-dev.ini:/usr/local/etc/php/conf.d/php.ini
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - laravel
    tty: true

  scheduler:
    build:
      context: .
      dockerfile: .docker/Dockerfile-api
      target: scheduler
    command: sh -c "chmod +x /usr/src/scheduler.sh && /usr/src/scheduler.sh"
    restart: unless-stopped
    volumes:
      - ./api:/usr/src
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - laravel

  worker:
    build:
      context: .
      dockerfile: .docker/Dockerfile-api
      target: worker
    command: sh -c "chmod +x /usr/src/worker.sh && /usr/src/worker.sh"
    restart: unless-stopped
    volumes:
      - ./api:/usr/src
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - laravel

  nginx:
    build:
      context: .
      dockerfile: .docker/Dockerfile-nginx
    container_name: ${DOCKER_PREFIX}_nginx
    command: sh -c "nginx -g \"daemon off;\""
    restart: unless-stopped
    volumes:
      - ./api:/usr/src
      - ./deployment/config/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
    networks:
      - laravel
    tty: true

  mysql:
    build:
      args:
        password: secret
      context: .
      dockerfile: .docker/Dockerfile-mysql
    container_name: ${DOCKER_PREFIX}_mysql
    restart: always
    volumes:
      - ./mysqldata:/var/lib/mysql
    ports:
      - "33060:3306"
    healthcheck:
      test: mysql -h localhost -u root -psecret -e 'SELECT version();'
      start_period: 5s
      interval: 15s
      timeout: 5s
      retries: 5
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_DATABASE=laravel
    networks:
      - laravel
    tty: true

  redis:
    image: redis:alpine
    container_name: ${DOCKER_PREFIX}_redis
    restart: unless-stopped
    volumes:
      - ./redisdata:/data
    ports:
      - "63790:6379"
    command: [ redis-server, --maxmemory 128mb, --maxmemory-policy volatile-lru, --save "" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - laravel
    tty: true

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "1080:1080"
    networks:
      - laravel

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8888:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: secret
    depends_on:
      - mysql
    networks:
      - laravel

  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - laravel

#  minio:
#    image: minio/minio
#    ports:
#      - "9000:9000"
#      - "9099:9099"
#    volumes:
#      - storage-minio:/data
#    environment:
#      - MINIO_ACCESS_KEY=admin
#      - MINIO_SECRET_KEY=admin123
#    command: server --address ":9099" --console-address ":9000" /data
#    networks:
#      - laravel

  meilisearch:
    image: getmeili/meilisearch:latest
    ports:
      - 7700:7700
    volumes:
      - ./data.ms:/data.ms
    networks:
      - laravel

  reverb:
    build:
      context: .
      dockerfile: .docker/Dockerfile-api
      target: reverb
    command: sh -c "chmod +x /usr/src/reverb.sh && /usr/src/reverb.sh"
    restart: unless-stopped
    volumes:
      - ./api:/usr/src
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - laravel

  stripe-cli:
    image: stripe/stripe-cli:latest
    command: listen --forward-to api:8000/stripe/webhook --format JSON --api-key sk_test_51PGGRERtk6LWYh9Nopr9EQ4r8UjXGQ48LbgeFofJDO8rf9Zn7lwKbaw5QHijXTUlCnmHrg0Ych5C06qZLIqITH1E00DKijZLGD
    ports:
      - "4242:4242"
    networks:
      - laravel
    tty: true

volumes:
  storage-minio:
  data.ms: