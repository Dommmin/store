networks:
  laravel:
    driver: bridge

services:
  proxy:
    image: dommin/store-proxy:${IMAGE_TAG}
    container_name: ${DOCKER_PREFIX}_proxy
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - frontend
      - nginx

  frontend:
    image: dommin/store-frontend:${IMAGE_TAG}
    container_name: ${DOCKER_PREFIX}_frontend
    restart: unless-stopped
    command: sh -c "npm run start"
    depends_on:
      - api

  api:
    image: dommin/store-api:${IMAGE_TAG}
    container_name: ${DOCKER_PREFIX}_api
    command: php-fpm
    restart: unless-stopped
    volumes:
      - type: volume
        source: storage
        target: /usr/src/storage
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  scheduler:
    image: dommin/store-scheduler:${IMAGE_TAG}
    container_name: ${DOCKER_PREFIX}_scheduler
    restart: unless-stopped
    command: sh -c "chmod +x /usr/src/scheduler.sh && /usr/src/scheduler.sh"
    volumes:
      - type: volume
        source: storage
        target: /usr/src/storage
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  worker:
    image: dommin/store-worker:${IMAGE_TAG}
    container_name: ${DOCKER_PREFIX}_worker
    restart: unless-stopped
    command: sh -c "chmod +x /usr/src/worker.sh && /usr/src/worker.sh"
    volumes:
      - type: volume
        source: storage
        target: /usr/src/storage
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  nginx:
    image: dommin/store-nginx:${IMAGE_TAG}
    container_name: ${DOCKER_PREFIX}_nginx
    command: sh -c "nginx -g \"daemon off;\""
    volumes:
      - ./public:/usr/src/public
    depends_on:
      - api

  mysql:
    image: dommin/starter-mysql:${IMAGE_TAG}
    container_name: ${DOCKER_PREFIX}_mysql
    restart: unless-stopped
    healthcheck:
      test: mysql -h localhost -u root -p${DB_PASSWORD} -e 'SELECT version();'
      start_period: 5s
      interval: 15s
      timeout: 5s
      retries: 5
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql

  redis:
    image: redis:alpine
    container_name: ${DOCKER_PREFIX}_redis
    restart: unless-stopped
    command: redis-server --maxmemory 128mb --maxmemory-policy volatile-lru --save ""
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - type: volume
        source: redisdata
        target: /data

volumes:
  storage:
  mysql-data:
  redisdata:
