name: Deploy to DigitalOcean

on:
  push:
    branches:
      - develop

env:
  API_IMAGE: dommin/store-api:${{ github.sha }}
  SCHEDULER_IMAGE: dommin/store-scheduler:${{ github.sha }}
  WORKER_IMAGE: dommin/store-worker:${{ github.sha }}
  NGINX_IMAGE: dommin/store-nginx:${{ github.sha }}
  PROXY_IMAGE: dommin/store-proxy:${{ github.sha }}
  MYSQL_IMAGE: dommin/store-mysql:${{ github.sha }}
  FRONTEND_IMAGE: dommin/store-frontend:${{ github.sha }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  build-backend-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build images
        run: |
          docker build -t $API_IMAGE --target=api --build-arg user=dominik --build-arg uid=1000 -f ./api/Dockerfile .
          docker build -t $SCHEDULER_IMAGE --target=scheduler --build-arg user=dominik --build-arg uid=1000 -f ./api/Dockerfile .
          docker build -t $WORKER_IMAGE --target=worker --build-arg user=dominik --build-arg uid=1000 -f ./api/Dockerfile .
      - name: Install dependencies
        run: docker run --rm -t $API_IMAGE composer install --prefer-dist --no-progress
      - name: Push images
        run: |
          docker push $API_IMAGE
          docker push $SCHEDULER_IMAGE
          docker push $WORKER_IMAGE

  build-mysql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build MySQL image
        run: docker build -t $MYSQL_IMAGE --build-arg password=${{ secrets.DB_PASSWORD }} -f ./Dockerfile.mysql .
      - name: Push Mysql image
        run: docker push $MYSQL_IMAGE

  analyze:
    needs: [build-backend-images, build-mysql]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull API image
        run: docker pull $API_IMAGE
      - name: Pull MySQL image
        run: docker pull $MYSQL_IMAGE
      - name: Install dependencies
        run: docker run --rm -t $API_IMAGE composer install --prefer-dist --no-progress
      - name: Run phpinsights
        run: |
          docker-compose -f docker-compose.ci.yml up -d
          docker-compose -f docker-compose.ci.yml exec -T api php artisan insights --no-interaction --min-quality=90 --min-complexity=90 --min-architecture=90 --min-style=90 --ansi --format=github-action

  test:
    needs: [ build-backend-images, build-mysql ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull API image
        run: docker pull $API_IMAGE
      - name: Pull MySQL image
        run: docker pull $MYSQL_IMAGE
      - name: Install dependencies
        run: docker run --rm -t $API_IMAGE composer install --prefer-dist --no-progress
      - name: Run tests
        run: |
          docker-compose -f docker-compose.ci.yml up -d
          docker-compose -f docker-compose.ci.yml exec -T api php artisan test

  remove-images:
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - uses: actions/checkout@v4
      - name: Remove images
        run: |
          ./deployment/bin/remove-image.sh dommin/store-api ${{ github.sha }} ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_PASSWORD }}
          ./deployment/bin/remove-image.sh dommin/store-mysql ${{ github.sha }} ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_PASSWORD }}
          ./deployment/bin/remove-image.sh dommin/store-worker ${{ github.sha }} ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_PASSWORD }}
          ./deployment/bin/remove-image.sh dommin/store-scheduler ${{ github.sha }} ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_PASSWORD }}

  build-nginx:
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build nginx image
        run: |
          docker build -t $NGINX_IMAGE -f ./Dockerfile.nginx .
          docker push $NGINX_IMAGE

  build-proxy:
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build nginx image
        run: |
          docker build -t $PROXY_IMAGE -f ./Dockerfile.proxy .
          docker push $PROXY_IMAGE

  build-frontend:
    needs: [ analyze, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build frontend image
        run: |
          docker build -t $FRONTEND_IMAGE --target=prod -f ./frontend/Dockerfile .
          docker push $FRONTEND_IMAGE

  deploy:
    needs: [ build-frontend, build-nginx, build-proxy, build-backend-images, build-mysql, analyze, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install SSH client and sshpass
        run: sudo apt-get install -y openssh-client sshpass
      - name: Deploy to DigitalOcean Droplet
        env:
          API_IMAGE: ${{ env.API_IMAGE }}
          SCHEDULER_IMAGE: ${{ env.SCHEDULER_IMAGE }}
          WORKER_IMAGE: ${{ env.WORKER_IMAGE }}
          NGINX_IMAGE: ${{ env.NGINX_IMAGE }}
          PROXY_IMAGE: ${{ env.PROXY_IMAGE }}
          MYSQL_IMAGE: ${{ env.MYSQL_IMAGE }}
          FRONTEND_IMAGE: ${{ env.FRONTEND_IMAGE }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          sshpass -p ${{ secrets.DIGITALOCEAN_SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} << 'EOF'
            docker pull ${{ env.API_IMAGE }}
            docker pull ${{ env.SCHEDULER_IMAGE }}
            docker pull ${{ env.WORKER_IMAGE }}
            docker pull ${{ env.NGINX_IMAGE }}
            docker pull ${{ env.PROXY_IMAGE }}
            docker pull ${{ env.MYSQL_IMAGE }}
            docker pull ${{ env.FRONTEND_IMAGE }}
          
            docker stop api scheduler worker nginx proxy mysql frontend || true
            docker rm api scheduler worker nginx proxy mysql frontend || true
          
            docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} ${{ env.MYSQL_IMAGE }}
            docker run -d --name api --link mysql:mysql ${{ env.API_IMAGE }}
            docker run -d --name scheduler --link mysql:mysql ${{ env.SCHEDULER_IMAGE }}
            docker run -d --name worker --link mysql:mysql ${{ env.WORKER_IMAGE }}
            docker run -d --name nginx --link api:api --link scheduler:scheduler --link worker:worker ${{ env.NGINX_IMAGE }}
            docker run -d --name proxy --link nginx:nginx ${{ env.PROXY_IMAGE }}
            docker run -d --name frontend --link api:api ${{ env.FRONTEND_IMAGE }}
          EOF
